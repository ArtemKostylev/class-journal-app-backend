datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int       @id @default(autoincrement())
  login    String    @unique
  password String
  role     Role      @relation(fields: [roleId], references: [id])
  roleId   Int
  teacher  Teacher[]
  deleted  Boolean   @default(false)
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model Teacher {
  id              Int                      @id @default(autoincrement())
  name            String?
  surname         String?
  parent          String?
  user            User?                    @relation(fields: [userId], references: [id])
  userId          Int?
  relations       Teacher_Course_Student[]
  Note            Note[]
  GroupConsult    GroupConsult[]
  courseHours     CourseHours[]
  deleted         Boolean                  @default(false)
  previousId      Int?
  freezeVersion   FreezeVersion?           @relation(fields: [freezeVersionId], references: [id])
  freezeVersionId Int?
  MidtermExam     MidtermExam[]
}

model Course {
  id                Int                      @id @default(autoincrement())
  name              String?
  group             Boolean                  @default(false)
  Note              Note[]
  relations         Teacher_Course_Student[]
  GroupConsult      GroupConsult[]
  excludeFromReport Boolean?                 @default(false)
  onlyGroups        Boolean?                 @default(false)
  onlyHours         Boolean?                 @default(false)
  courseHours       CourseHours[]
  deleted           Boolean                  @default(false)
  previousId        Int?
  freezeVersion     FreezeVersion?           @relation(fields: [freezeVersionId], references: [id])
  freezeVersionId   Int?
}

model Student {
  id               Int                      @id @default(autoincrement())
  name             String?
  surname          String?
  class            Int?
  program          Program?
  relations        Teacher_Course_Student[]
  specialization   Specialization?          @relation(fields: [specializationId], references: [id])
  specializationId Int?
  deleted          Boolean                  @default(false)
  previousId       Int?
  freezeVersion    FreezeVersion?           @relation(fields: [freezeVersionId], references: [id])
  freezeVersionId  Int?
  MidtermExam      MidtermExam[]
}

// This model keeps hours pasted by sup to students
model CourseHours {
  id        Int      @id @default(autoincrement())
  course    Course?  @relation(fields: [courseId], references: [id])
  courseId  Int?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  teacherId Int?
  class     Int?
  program   Program?
  subgroup  Int?
  date      DateTime
  hours     Float
  deleted   Boolean  @default(false)
}

model Teacher_Course_Student {
  id              Int            @id @default(autoincrement())
  teacher         Teacher        @relation(fields: [teacherId], references: [id])
  teacherId       Int
  student         Student?       @relation(fields: [studentId], references: [id])
  studentId       Int?
  course          Course         @relation(fields: [courseId], references: [id])
  courseId        Int
  subgroup        Int?
  consult         Consult[]
  journalEntry    JournalEntry[]
  quaterMark      QuaterMark[]
  archived        Boolean        @default(false)
  previousId      Int?
  freezeVersion   FreezeVersion? @relation(fields: [freezeVersionId], references: [id])
  freezeVersionId Int?
}

model JournalEntry {
  id          Int                    @id @default(autoincrement())
  mark        String
  date        DateTime
  relation    Teacher_Course_Student @relation(fields: [relationId], references: [id])
  relationId  Int
  replacement Replacement?
  deleted     Boolean                @default(false)
}

model QuaterMark {
  id         Int                    @id @default(autoincrement())
  mark       String
  period     Period
  relation   Teacher_Course_Student @relation(fields: [relationId], references: [id])
  relationId Int
  year       Int                    @default(2021)
  deleted    Boolean                @default(false)
}

model Replacement {
  id           Int          @id @default(autoincrement())
  date         DateTime
  journalEntry JournalEntry @relation(fields: [entryId], references: [id])
  entryId      Int          @unique
  deleted      Boolean      @default(false)
}

model Consult {
  id         Int                    @id @default(autoincrement())
  date       DateTime
  year       Int
  relation   Teacher_Course_Student @relation(fields: [relationId], references: [id])
  relationId Int
  hours      Float
  deleted    Boolean                @default(false)
}

model GroupConsult {
  id        Int      @id @default(autoincrement())
  date      DateTime
  year      Int
  class     Int
  subgroup  Int?
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  teacherId Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  hours     Float
  program   Program
  deleted   Boolean  @default(false)
}

model Note {
  id        Int     @id @default(autoincrement())
  text      String
  year      Int
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId Int
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int
  deleted   Boolean @default(false)
}

model Load {
  id      Int     @id @default(autoincrement())
  course  Int
  class   Int
  program Program
  hours   Int
  deleted Boolean @default(false)
}

model Specialization {
  id              Int            @id @default(autoincrement())
  name            String
  Student         Student[]
  deleted         Boolean        @default(false)
  previousId      Int?
  freezeVersion   FreezeVersion? @relation(fields: [freezeVersionId], references: [id])
  freezeVersionId Int?
}

model FreezeVersion {
  id                     Int                      @id @default(autoincrement())
  year                   Int
  Teacher                Teacher[]
  Course                 Course[]
  Student                Student[]
  Teacher_Course_Student Teacher_Course_Student[]
  Specialization         Specialization[]
  MidtermExam            MidtermExam[]
}

model MidtermExam {
  id              Int             @id @default(autoincrement())
  student         Student         @relation(fields: [studentId], references: [id])
  studentId       Int
  teacher         Teacher         @relation(fields: [teacherId], references: [id])
  teacherId       Int
  type            MidtermExamType @relation(fields: [typeId], references: [id])
  typeId          Int
  contents        String?
  date            DateTime?       @db.Timestamp(0)
  result          String?
  freezeVersion   FreezeVersion?  @relation(fields: [freezeVersionId], references: [id])
  freezeVersionId Int?
  deleted         Boolean         @default(false)
}

model MidtermExamType {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  MidtermExam MidtermExam[]
  deleted     Boolean       @default(false)
}

enum Period {
  first
  second
  third
  fourth
  year
}

enum Program {
  PP_5
  PP_8
  OP
}
